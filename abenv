#!/bin/bash
#
# all common environment variables needed for the abroute_docker group
#

PG_VERSION=9.4
PG_HOME="/var/lib/postgresql"
PG_SRC_CONF="/usr/lib/postgresql/etc.tar.gz"
PG_SRC_CONF_DIR="/etc/postgresql"
PG_CONFDIR="/etc/postgresql/${PG_VERSION}/main"
PG_BINDIR="/usr/lib/postgresql/${PG_VERSION}/bin"
PG_DATADIR="${PG_HOME}/${PG_VERSION}/main"
PSQL_TRUST_LOCALNET=true

export PG_VERSION PG_HOME PG_CONFDIR PG_BINDIR PG_DATADIR PSQL_TRUST_LOCALNET

DB_NAME=autobahn
DB_USER=autouser
DB_PASS=123test
DB_HOST=pg

export DB_NAME DB_USER DB_PASS DB_HOST

AB_PORT=18080
AB_ROUTER=router
WEBSOCKET=ws://${AB_ROUTER}:${AB_PORT}/ws
DSN="dbname=${DB_NAME} host=${DB_HOST} user=${DB_USER}"

set -o vi

# this is a simple timeout function for linking containers
DEFAULT_WAIT_TIME=60
DEFAULT_WAIT_FILE=FOOBAR
DEFAULT_WAIT_TYPE=ethernet
#DEFAULT_WAIT_TYPE=file

function waitforfile {
  # first argument is the file to wait for
  # second argument is the number of seconds, 60 default
  fwf=${WAIT_FILE-$DEFAULT_WAIT_FILE}
  tov=${WAIT_TIME-$DEFAULT_WAIT_TIME}
  if [ $tov -lt 0 ]
  then
    echo 'timeout must be greater than 0 in waitforfile()' >&2
    return 1
  fi
  if [ $fwf == 'FOOBAR' ]
  then
    echo 'must supply file name in waitforfile()' >&2
    return 1
  fi

  while [ ! -f $fwf ]
  do
    echo -n .
    sleep 1
    (( tov-- ))
    if [ $tov -lt 0 ]
    then
      echo 'timeout!!'
      return 1
    fi
  done
  return 0
}

function waitforlink {
  # first argument is the amount of seconds that are allowed for the wait
  # period. 60 second is the default (long time)
  tov=${1-$DEFAULT_WAIT_TIME}
  if [ $tov -lt 0 ]
  then
    return 1
  fi

  #
  # check for linked dependencies
  #
  hosts=($(env | grep _TCP_ADDR | cut -d = -f 1))
  ports=($(env | grep _TCP_PORT | cut -d = -f 1))
  
  pl=$(for host in ${hosts[@]};
  do
    port=$(echo $host | sed 's/_ADDR/_PORT/')
    hosti=$(env | egrep ^$host | cut -d = -f 2)
    porti=$(env | egrep ^$port | cut -d = -f 2)
    echo $hosti:$porti
  done | sort -u)
  
  for q in $pl
  do
    p=$(echo $q | sed 's/:/ /')
    echo waiting for $p
    while ! nc -w 1 $p 2>/dev/null
    do
      echo -n .
      sleep 1
      (( tov-- ))
      if [ $tov -lt 0 ]
      then
        echo 'timeout!!'
        return 1
      fi
    done
    echo 'X'
  done
  return 0
}

